// Learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(uuid())
  authMethods    AuthMethod[]
  email          String      @unique
  mobileNumber   String?     @unique
  username       String? 
  password       String?   
  role           Role        @default(USER) 
  emailVerified  Boolean     @default(false) 
  refreshToken   String?  
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relationships
  sentMessages   Message[]    @relation("SentMessages")
  receivedChats  Chat[]       @relation("ReceiversChats")
  sentChats      Chat[]       @relation("SendersChats")
}

model Chat {
  id             String         @id @default(uuid())
  user1Id        String
  user2Id        String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user1          User           @relation("SendersChats", fields: [user1Id], references: [id], onDelete: Cascade)
  user2          User           @relation("ReceiversChats", fields: [user2Id], references: [id], onDelete: Cascade)
  messages       Message[]
}

model Message {
  id             String         @id @default(uuid())
  chatId         String
  senderId       String
  content        String
  isRead         Boolean        @default(false)
  createdAt      DateTime       @default(now())
  chat           Chat           @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender         User           @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum AuthMethod {
  GOOGLE
  FINGERPRINT
  EMAIL_PASS
}


enum PropType {
  APARTMENT
  HOUSE
  VILLA
}

enum PropStatus {
  AVAILABLE
  SOLD
  RENTED
}

enum TransactionType {
  BUY
  SELL
  RENT
}

enum BookingStatus {
  PENDING
  ACCEPTED
  REJECTED
}
